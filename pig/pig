#!/usr/bin/env perl
#
# PIG - Perl Imagegallery Generator
#
# Copyright (C) 2004: Ævar Arnfjörð Bjarmason
# Ævar Arnfjörð Bjarmason <avar@users.berlios.de>, 2004
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

use strict;
package main;

require 'config.pl';

my %outfiles = (
	php 	=> 'index.php',
	asp 	=> 'Default.asp',
	html	=> 'index.html',
);

my $outf;
if ( ${conf::dynamic} =~ /php/i ) {
	$outf = $outfiles{"php"};
} elsif ( ${conf::dynamic} =~ /asp/i ) {
	$outf = $outfiles{"asp"};
} else {
	$outf = $outfiles{"html"};
}

open( OUTF, ">$outf" ) or die("Can't open '$outf' for writing: $!");

if ( ${conf::dynamic} =~ /php/i ) {
print OUTF <<PHP;
<?php
header('Content-Type: text/html; charset=UTF-8');
echo ('<?xml version="1.0" encoding="UTF-8"?>'."\\n");
?>
PHP
} elsif ( ${conf::dynamic} =~ /asp/i ) {
	# Would add this header, however this would add to the already existing
	# Content-Type header, so if you're going to use the AddHeader function make
	# sure the header doesnt exist already 
	#<%Response.AddHeader "Content-Type","text/html; charset=UTF-8"%> 
	print OUTF '<%Response.Charset="UTF-8"%>'."\n";
	printf OUTF '<?xml version="1.0" encoding="UTF-8"?>'."\n";
} else {
	printf OUTF '<?xml version="1.0" encoding="UTF-8"?>'."\n";
}
print OUTF <<HEAD;
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
	<title>${conf::title}</title>
HEAD
print OUTF "\t" . '<meta name="generator" content="PIG - Perl Imagegallery Generator, Perl '; printf OUTF "v%vd", $^V; print OUTF '"/>' . "\n";
print OUTF <<HEAD;
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
HEAD
if ( ${conf::theme} eq 'bxs_d' or ${conf::theme} eq '' ) {
	print OUTF "\t" . '<link rel="stylesheet"' . ' ';
} else {
	print OUTF "\t" . '<link rel="alternate stylesheet"' . ' ';
}
print OUTF 'type="text/css" href="' . ${conf::css_prefix} . 'bxs_d.css" title="Boxes - Dark" media="screen, projection"/>' . "\n";

if ( ${conf::theme} eq 'bxs_l' ) {
	print OUTF "\t" . '<link rel="stylesheet"' . ' ';
} else {
	print OUTF "\t" . '<link rel="alternate stylesheet"' . ' ';
}
print OUTF 'type="text/css" href="'. ${conf::css_prefix} . 'bxs_l.css" title="Boxes - Light" media="screen, projection"/>' . "\n";
print OUTF <<HEAD;
</head>

<body>

HEAD
unless (${conf::h1} eq "" || !defined ${conf::h1} ) {
	print OUTF "<h1>${conf::h1}</h1>\n\n";
}
unless (${conf::h2} eq "" || !defined ${conf::h2} ) {
	print OUTF "<h2>${conf::h2}</h2>\n\n";
}

print OUTF "<div>\n";

# Subroutines

# This subroutine generates modified versions of the $dir variable, it detects
# if the $dir variable contains a ISO Date and makes appropriate modificatins 
sub gen_dir_vars {
	package dir;
	# First undefine these variables which might be filled.
	our $short 		= undef;
	our $underscore 	= undef;
	our $url 		= undef;
	our $short_underscore	= undef;
	our $short_url		= undef;
	our $short_html		= undef;

	# For dirs with ISO Dates in their names
	if ($main::dir =~ /^\d{4}-\d{2}-\d{2}/) {	
		($short = $main::dir) =~ s/^.{11}//; # s/^{11}//g;
	# For the others
	} else {
		($short = $main::dir);
	}
	($underscore = $main::dir) =~ s/\ /_/g;
	($url = $main::dir) =~ s/\ /%20/g;
	($short_underscore = $short) =~ s/\ /_/g;
	($short_url = $short) =~ s/\ /%20/g;
	# This is only needed in the short form
	($short_html = $short) =~ s/(\w)(\w*)/<span>\U$1\L<\/span>\E$2/g;
	# Better but unimplemented version:
	# echo "foo b ar" | perl -lne'map { @a = split( //, $_ ); print "<em>$a[0]</em>" . ( $a[1] ? "<small>$a[1]</small>": "") } split(/\s+/, $_);'

	# Example usage:
	#	&gen_dir_vars;
	#	print "$main::dir\n";
	#	print "$dir::underscore\n";
	#	print "$dir:url\n";
	#	print "$dir::short\n";
	#	print "$dir::short_underscore\n";
	#	print "$dir::short_url\n";
	#	print "$dir::$short_html\n";
	# Output:
	#	2004-04-01 This is a description
	#	2004-04-01_This_is_a_description
	#	2004-04-01%20This%20is%20a%20description
	#	This is a description
	#	This_is_a_description
	#	This%20is%20a%20description
	#	<em>T</em>his <em>i</em>s <em>a</em> <em>d</em>escription
	return 1;
}

sub gen_img_vars {
	package img;
	# First undefine these variables which might be filled.
	our $short = undef;
	our $w = undef;
	our $h = undef;
	#undef our $i if our $i = undef;
	# Generate a version of $file that has no extention
	($short = $main::file_dir[$main::i]) =~ s/\.[^.]*$//g;
	
	# Generate width/height from $dimensions, only one call is made to
	# identify and then perl split() is used., however this makes the
	# script 6 times slower. 4s VS 24 in previous tests.
	
	# our $dimensions = `identify -ping -format "%w:%h" "${conf::root}/${conf::img_gen}/thumb.${dir::underscore}_${main::file}"`;
	# our $dimensions =~ tr/\n//d;
	# (our $w, our $h) = split(/\:/, $dimensions, 2);

	return 1;
}

# Generate the unordered list:
print OUTF "<ul>\n";
opendir(IMG_SRC_DIR, ${conf::img_src}) || die "\tCannot opendir() '${conf::img_src}' ($!)";
my @img_src_dirs = readdir(IMG_SRC_DIR);
closedir(IMG_SRC_DIR);
foreach our $dir (sort @img_src_dirs) {
	&gen_dir_vars;
	unless ( ($dir eq '.') || ($dir eq '..') || ($dir eq '.svn') || (!-d "${conf::img_src}/$dir") ) {
		&gen_dir_vars;
		# (my $date, my $text) = split(/\s+/, $dir, 2);
		# print "$date, $text";
		print OUTF "\t<li><a href=\"#${dir::short_underscore}\" title=\"${dir::short}\">$dir</a></li>\n";
	}
}
print OUTF "</ul>\n";

# Open to the img/src/ directory and list it's contents
opendir(IMG_SRC_DIR, ${conf::img_src}) || die "\tCannot opendir() '${conf::img_src}' ($!)";
@img_src_dirs = sort readdir(IMG_SRC_DIR);
closedir(IMG_SRC_DIR);

# Sort the contents of img/src/ and generate some variables from it
foreach our $dir (@img_src_dirs) {
	&gen_dir_vars;
	# Entering the img/src/*/
	unless ( ($dir eq '.') || ($dir eq '..') || ($dir eq '.svn') || (!-d "${conf::img_src}/$dir") ) {
		chdir "${conf::img_src}/${dir}/" || die "\tCannot chdir() to '$dir'; $!\n";
		print OUTF "\n<h3 id=\"${dir::short_underscore}\">${dir::short_html}</h3>\n";

		# Reading files in img/src/*/
		opendir(FILE_DIR, '.');
		our @file_dir = sort grep(( /\.png$/i || /\.gif$/i || /\.jp(eg|g)$/i ), readdir FILE_DIR);
		closedir(FILE_DIR);
		# Due to arrays counting from 0 and the for-loop that begins 2
		# line below here counting from 1 because otherwise i cannot
		# make the ${conf::columns} value be 1. This is a workaround
		# around that bug which pushes the array forward by one
		# inserting this string as 0, so that when the below for-loop
		# starts counting at 1 it doesnt skip anything relevant. 
		unshift(@file_dir, "Bugfix");
		for ( our $i=1; $i <= ($#file_dir); $i++ ) {
			&gen_dir_vars;
			unless ( ($file_dir[$i] eq '.') || ($file_dir[$i] eq '..') || ($file_dir[$i] eq '.svn') || (!-f $file_dir[$i]) ) {
				&gen_img_vars;
				# Only generate a big picture if the convert_args_big option is set.
				if (${conf::convert_args_big}) {
					if (!-e "${conf::root}/${conf::img_gen}/${dir::underscore}_$file_dir[$i]") {
						system("convert ${conf::convert_args_big} \"$file_dir[$i]\" \"${conf::root}/${conf::img_gen}/${dir::underscore}_$file_dir[$i]\"");
					}
				}
				if (!-e "${conf::root}/${conf::img_gen}/thumb.${dir::underscore}_$file_dir[$i]" ) {
					system("convert ${conf::convert_args_thumb} \"$file_dir[$i]\" \"${conf::root}/${conf::img_gen}/thumb.${dir::underscore}_$file_dir[$i]\"");
				}
				print OUTF "\t<a href=\"${conf::img_gen}/${dir::underscore}_$file_dir[$i]\">\n" if (${conf::convert_args_big});
				print OUTF "\t\t" if (${conf::convert_args_big});
				print OUTF "\t" if (!${conf::convert_args_big});
				print OUTF "<img src=\"${conf::img_gen}/thumb.${dir::underscore}_$file_dir[$i]\" alt=\"${dir::short} - ${img::short}\"/>\n";
				print OUTF "\t</a>\n" if (${conf::convert_args_big});
				#${conf::columns}
				unless ( ${conf::columns} == 0 ) {
					if ($i % ${conf::columns} == 0) {
						print OUTF "\t\t<br/>\n" if (${conf::convert_args_big});
						print OUTF "\t<br/>\n" if (!${conf::convert_args_big});
					}
				}
			}
		}
		chdir "${conf::root}";
	}
}

print OUTF "</div>\n\n";
unless (${conf::address} eq "" || !defined ${conf::address} ) {
	print OUTF "<address>${conf::address}</address>\n\n";
}
print OUTF "</body>\n";
print OUTF "</html>\n";

close(OUTF)

